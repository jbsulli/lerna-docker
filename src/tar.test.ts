import { Readable } from "stream";

import tar, { testables } from "./tar";

const { encodeFileMode, encodeNumber } = testables;

const streamToBuffer = async (stream: Readable): Promise<Buffer> => {
  return new Promise((resolve, reject) => {
    const buffers = [];
    stream.on("data", (buffer) => {
      buffers.push(buffer);
    });
    stream.on("end", () => {
      resolve(Buffer.concat(buffers));
    });
    stream.on("error", (err) => reject(err));
  });
};

const format: Array<
  [
    number,
    number,
    string,
    "enum" | "number" | "string",
    string,
    string | number
  ]
> = [
  [
    0,
    100,
    "file name",
    "string",
    "746573742e6a73000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "test.js",
  ],
  [100, 8, "file mode", "number", "3030303634342000", 644],
  [108, 8, "user id", "number", "3030313735302000", 1750],
  [116, 8, "group id", "number", "3030313735302000", 1750],
  [124, 12, "size", "number", "303030303030303033352000", 35],
  [136, 12, "modified", "number", "313337353737353532343700", 13757755247],
  [148, 8, "checksum", "number", "3031343236322000", 14262],
  [156, 1, "type", "enum", "30", "0"],
  [
    157,
    100,
    "link",
    "string",
    "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "",
  ],
  [257, 6, "ustar magic", "string", "757374617200", "ustar\u0000"],
  [263, 2, "ustar version", "enum", "3030", "00"],
  [
    265,
    32,
    "user name",
    "string",
    "6a6273756c6c6900000000000000000000000000000000000000000000000000",
    "jbsulli",
  ],
  [
    297,
    32,
    "group name",
    "string",
    "0000000000000000000000000000000000000000000000000000000000000000",
    "",
  ],
  [329, 8, "device major number", "number", "3030303030302000", 0],
  [337, 8, "device minor number", "number", "3030303030302000", 0],
  [
    345,
    131,
    "prefix",
    "string",
    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "",
  ],
  [476, 12, "access", "number", "313337363033303633373500", 13760306375],
  [488, 12, "created", "number", "313337353737353532343700", 13757755247],
  [500, 12, "pad", "string", "000000000000000000000000", ""],
  [
    512,
    512,
    "file",
    "string",
    "636f6e736f6c652e6c6f67282248656c6c6f20776f726c642122293b0a
    'console.log("Hello world!");\n',
  ],
  [
    1024,
    1024,
    "tail",
    "string",

    "",
  ],
];

describe("encodeNumber", () => {
  it("should encode a number, pad with zeros, and end with space + NUL", () => {
    expect(encodeNumber(123, "Test", 12).toString()).toEqual(
      "0000000123 \u0000"
    );
  });

  it("should encode a number ending with NUL if no zero padding", () => {
    expect(encodeNumber(13757755247, "Test", 12).toString()).toEqual(
      "13757755247\u0000"
    );
  });

  it("should throw if the number is too big", () => {
    expect(() => encodeNumber(42, "Number", 2)).toThrow(
      /^Number is too big \[42 > 8\]$/
    );
  });
});

describe("encodeFileMode", () => {
  it("should encode a file mode, pad with zeros, and end with space NUL", () => {
    expect(encodeFileMode(644).toString()).toEqual("000644 \u0000");
  });

  it("should throw if the mode is invalid", () => {
    expect(() => encodeFileMode(888)).toThrow(/^File mode is invalid \[888\]$/);
  });
});

describe("tar", () => {
  describe("should take a file and convert to a tar", () => {
    let bytes: string;

    beforeAll(async () => {
      const archive = tar([
        {
          accessed: new Date(13760306375000),
          created: new Date(13757755247000),
          groupId: 1750,
          modified: new Date(13757755247000),
          name: "test.js",
          src: () => 'console.log("Hello world!");\n',
          userId: 1750,
          userName: "jbsulli",
        },
      ]);

      bytes = (await streamToBuffer(archive)).toString("hex");
    });

    format.forEach(([offset, size, name, , sample]) => {
      it(`should match sample ${name}`, () => {
        expect(bytes.substr(offset * 2, size * 2)).toEqual(sample);
      });
    });
  });
});

describe("format", () => {
  it("should all add up", () => {
    expect(
      format.reduce((pos: number, [offset, size, , , sample]): number => {
        expect(pos).toEqual(offset);
        expect(sample.length).toEqual(size * 2);
        return pos + size;
      }, 0)
    ).toEqual(2048);
  });

  describe("should have consistent number values", () => {
    const numbers = format.filter(([, , , type]) => type === "number");
    numbers.forEach(([, , name, , sample, value]) => {
      it(`should have a number value for ${name}`, () => {
        if (sample.substr(0, 2) === "30") {
          // should end with a space + NUL
          expect(/2000$/.test(sample)).toEqual(true);
          expect(
            parseInt(
              Buffer.from(
                sample.substr(0, sample.length - 4),
                "hex"
              ).toString(),
              10
            )
          ).toEqual(value);
        } else {
          // should end with NUL
          expect(/00$/.test(sample)).toEqual(true);
          expect(
            parseInt(
              Buffer.from(
                sample.substr(0, sample.length - 2),
                "hex"
              ).toString(),
              10
            )
          ).toEqual(value);
        }
      });
    });
  });

  describe("should have consistent string values", () => {
    const strings = format.filter(([, , , type]) => type === "string");
    strings.forEach(([, , name, , sample]) => {
      it(`should have a string value for ${name}`, () => {
        expect(sample.match(/^(.*?)((?:00)+)$/)).not.toEqual(null);
      });
    });
  });
});
